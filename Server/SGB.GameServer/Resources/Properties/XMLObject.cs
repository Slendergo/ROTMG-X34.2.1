using SGB.Shared;
using StackExchange.Redis;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace SGB.GameServer.Resources.Properties
{
    public class XMLObject
    {
        public int Type;
        public string IdName;
        public readonly int SetType;
        public readonly string SetName;
        public readonly string DisplayId;
        public readonly string Class;
        public readonly bool Enemy;
        public readonly int MaxHitPoints;
        public readonly int Defense;
        public readonly int Size;
        public readonly double Exp;
        public readonly bool StasisImmune;
        public readonly string Group;
        public readonly Dictionary<int, XMLProjectile> Projectiles;
        public readonly bool Flying;
        public readonly bool Quest;
        public readonly bool HealthBarBoss;
        public readonly bool God;
        public readonly bool StunImmune;
        public readonly bool ParalyzeImmune;
        public readonly bool TrackLoot;
        public readonly bool EventChestBoss;
        public readonly bool Item;
        public readonly int SlotType;
        public readonly string Description;
        public readonly double RateOfFire;
        public readonly int BagType;
        public readonly int FameBonus;
        public readonly int NumProjectiles;
        public readonly double ArcGap;
        public readonly int FeedPower;
        public readonly bool Soulbound;
        public readonly bool Invincible;
        public readonly string Terrain;
        public readonly double SpawnProb;
        public readonly int PerRealmMax;
        public readonly int ShadowSize;
        public readonly int Level;
        public readonly bool IntergamePortal;
        public readonly string DungeonName;
        public readonly int RandomTexture;
        public readonly bool Static;
        public readonly bool OccupySquare;
        public readonly int Rotation;
        public readonly bool FullOccupy;
        public readonly bool EnemyOccupySquare;
        public readonly bool BlocksSight;
        public readonly bool Friendly;
        public readonly bool CanUseTexes;
        public readonly bool NoMiniMap;
        public readonly int MinSize;
        public readonly int MaxSize;
        public readonly bool NoCollisionWhenMovement;
        public readonly bool KeepDamageRecord;
        public readonly bool ProtectFromSink;
        public readonly bool Connects;
        public readonly bool SlowImmune;
        public readonly bool DazedImmune;
        public readonly int SizeStep;
        public readonly List<XElement> Activates;
        public readonly bool Consumable;
        public readonly bool Potion;
        public readonly bool NoArticle;
        public readonly bool DontFaceAttacks;
        public readonly bool DontFaceMovement;
        public readonly bool Hero;
        public readonly bool HealthBar;
        public readonly bool Container;
        public readonly bool CanPutNormalObjects;
        public readonly int[] SlotTypes;
        public readonly bool ShowName;
        public readonly bool CanPutSoulboundObjects;
        public readonly bool Loot;
        public readonly bool Track;
        public readonly bool ProtectFromGroundDamage;
        public readonly bool Encounter;
        public readonly bool InvUse;
        public readonly int Tex1;
        public readonly int Tex2;
        public readonly bool Cube;
        public readonly int Tier;
        public readonly bool DropTradable;
        public readonly List<XElement> ActivateOnEquip;
        public readonly bool Usable;
        public readonly int MpCost;
        public readonly int Doses;
        public readonly string SuccessorId;
        public readonly double Cooldown;
        public readonly double Timer;
        public readonly bool XpBoost;
        public readonly int ScaleValue;
        public readonly int MpEndCost;
        public readonly bool MultiPhase;
        public readonly bool LTBoosted;
        public readonly bool LDBoosted;
        public readonly bool Backpack;
        public readonly List<XElement> OnPlayerHitActivate;
        public readonly bool Treasure;
        public readonly bool PetFood;
        public readonly bool PetFormStone;
        public readonly int MpCostPerSecond;
        public readonly List<XElement> OnPlayerAbilityActivate;
        public readonly List<XElement> OnPlayerShootActivate;
        public readonly string PetFamily;
        public readonly string Rarity;
        public readonly int Spawn;
        public readonly bool LeachHealth;
        public readonly bool LockedPortal;
        public readonly bool Oryx;
        public readonly int[] Equipment;
        public readonly bool NexusPortal;
        public readonly int Price;
        public readonly string GuildItem;
        public readonly string GuildItemParam;
        public readonly bool NoTexture;
        public readonly bool UnityOnly;
        public readonly bool AlwaysPositiveHealth;

        // pet 

        public readonly string PetId;
        public readonly string PetSkin;
        public readonly bool VaultItem;
        public readonly int Quantity;
        public readonly bool Pet;
        public readonly string Family;
        public readonly string DefaultSkin;
        public readonly string FirstAbility;
        public readonly bool BasicPet;
        public readonly bool NoHatchOrFuse;
        public readonly bool PetProjectile;
        public readonly bool PetBehavior;
        public readonly string BaseBehaviorId;
        public readonly XElement Parameters;
        public readonly bool PetAbility;

        // player
        public readonly bool Player;
        public readonly int MaxMagicPoints;
        public readonly int Attack;
        public readonly int Speed;
        public readonly int Dexterity;
        public readonly int HpRegen;
        public readonly int MpRegen;
        public readonly Dictionary<string, KeyValuePair<int, int>> LevelIncreases;
        public readonly Dictionary<string, KeyValuePair<int, int>> UnlockLevel;
        public readonly int SkinUnlockLevel;
        public readonly int UnlockCost;
        public readonly bool SpawnPoint;
        public readonly bool Skin;
        public readonly int PlayerClassType;
        public readonly int PetYardType;
        public readonly int Fame;

        public static Dictionary<string, int> Attributes = new Dictionary<string, int>();
        public static Dictionary<string, int> Elements = new Dictionary<string, int>();

        public XMLObject(XElement elem)
        {
            Type = elem.IntAttribute("type");
            IdName = elem.StringAttribute("id");
            SetType = elem.IntAttribute("setType");
            SetName = elem.StringElement("setName");
            DisplayId = elem.StringElement("DisplayId");
            Class = elem.StringElement("Class");
            Enemy = elem.BoolElement("Enemy");
            MaxHitPoints = elem.IntElement("MaxHitPoints");
            Defense = elem.IntElement("Defense");
            Size = elem.IntElement("Size");
            Exp = elem.DoubleElement("Exp");
            StasisImmune = elem.BoolElement("StasisImmune");
            Group = elem.StringElement("Group");
            Projectiles = elem.Elements("Projectile").ToDictionary(_ => _.IntAttribute("id"), _ => new XMLProjectile(_));
            Flying = elem.BoolElement("Flying");
            Quest = elem.BoolElement("Quest");
            HealthBarBoss = elem.BoolElement("HealthBarBoss");
            God = elem.BoolElement("God");
            StunImmune = elem.BoolElement("StunImmune");
            ParalyzeImmune = elem.BoolElement("ParalyzeImmune");
            TrackLoot = elem.BoolElement("TrackLoot");
            EventChestBoss = elem.BoolElement("EventChestBoss");
            Item = elem.BoolElement("Item");
            SlotType = elem.IntElement("SlotType");
            Description = elem.StringElement("Description");
            RateOfFire = elem.DoubleElement("RateOfFire");
            BagType = elem.IntElement("BagType");
            FameBonus = elem.IntElement("FameBonus");
            NumProjectiles = elem.IntElement("NumProjectiles");
            ArcGap = elem.IntElement("ArcGap");
            FeedPower = elem.IntElement("feedPower");
            Soulbound = elem.BoolElement("Soulbound");
            Invincible = elem.BoolElement("Invincible");
            Terrain = elem.StringElement("Terrain");
            SpawnProb = elem.DoubleElement("SpawnProb");
            PerRealmMax = elem.IntElement("PerRealmMax");
            ShadowSize = elem.IntElement("ShadowSize");
            Level = elem.IntElement("Level");
            IntergamePortal = elem.BoolElement("IntergamePortal");
            DungeonName = elem.StringElement("DungeonName");
            Static = elem.BoolElement("Static");
            OccupySquare = elem.BoolElement("OccupySquare");
            Rotation = elem.IntElement("Rotation");
            FullOccupy = elem.BoolElement("FullOccupy");
            EnemyOccupySquare = elem.BoolElement("EnemyOccupySquare");
            BlocksSight = elem.BoolElement("BlocksSight");
            Friendly = elem.BoolElement("Friendly");
            CanUseTexes = elem.BoolElement("CanUseTexes");
            NoMiniMap = elem.BoolElement("NoMiniMap");
            MinSize = elem.IntElement("MinSize");
            MaxSize = elem.IntElement("MaxSize");
            NoCollisionWhenMovement = elem.BoolElement("NoCollisionWhenMovement");
            KeepDamageRecord = elem.BoolElement("KeepDamageRecord");
            ProtectFromSink = elem.BoolElement("ProtectFromSink");
            Connects = elem.BoolElement("Connects");
            SlowImmune = elem.BoolElement("SlowImmune");
            DazedImmune = elem.BoolElement("DazedImmune");
            SizeStep = elem.IntElement("SizeStep");
            Activates = elem.Elements("Activate").ToList();
            Consumable = elem.BoolElement("Consumable");
            Potion = elem.BoolElement("Potion");
            NoArticle = elem.BoolElement("NoArticle");
            DontFaceAttacks = elem.BoolElement("DontFaceAttacks");
            DontFaceMovement = elem.BoolElement("DontFaceMovement");
            Hero = elem.BoolElement("Hero");
            HealthBar = elem.BoolElement("HealthBar");
            Container = elem.BoolElement("Container");
            CanPutNormalObjects = elem.BoolElement("CanPutNormalObjects");
            SlotTypes = elem.FromCommaSepString32("SlotTypes");
            ShowName = elem.BoolElement("ShowName");
            CanPutSoulboundObjects = elem.BoolElement("CanPutSoulboundObjects");
            Loot = elem.BoolElement("Loot");
            Track = elem.BoolElement("Track");
            ProtectFromGroundDamage = elem.BoolElement("ProtectFromGroundDamage");
            Encounter = elem.BoolElement("Encounter");
            InvUse = elem.BoolElement("InvUse");
            Tex1 = elem.IntElement("Tex1");
            Tex2 = elem.IntElement("Tex2");
            Cube = elem.BoolElement("Cube");
            Tier = elem.IntElement("Tier");
            DropTradable = elem.BoolElement("DropTradable");
            ActivateOnEquip = elem.Elements("ActivateOnEquip").ToList();
            Usable = elem.BoolElement("Usable");
            MpCost = elem.IntElement("MpCost");
            Doses = elem.IntElement("Doses");
            SuccessorId = elem.StringElement("SuccessorId");
            Cooldown = elem.DoubleElement("Cooldown");
            Timer = elem.DoubleElement("Timer");
            XpBoost = elem.BoolElement("XpBoost");
            ScaleValue = elem.IntElement("ScaleValue");
            MpEndCost = elem.IntElement("MpEndCost");
            MultiPhase = elem.BoolElement("MultiPhase");
            LTBoosted = elem.BoolElement("LTBoosted");
            LDBoosted = elem.BoolElement("LDBoosted");
            Backpack = elem.BoolElement("Backpack");
            OnPlayerHitActivate = elem.Elements("OnPlayerHitActivate").ToList();
            Treasure = elem.BoolElement("Treasure");
            PetFood = elem.BoolElement("PetFood");
            PetFormStone = elem.BoolElement("PetFormStone");
            MpCostPerSecond = elem.IntElement("MpCostPerSecond");
            OnPlayerAbilityActivate = elem.Elements("OnPlayerAbilityActivate").ToList();
            OnPlayerShootActivate = elem.Elements("OnPlayerShootActivate").ToList();
            PetFamily = elem.StringElement("PetFamily");
            Rarity = elem.StringElement("Rarity");
            Spawn = elem.IntElement("Spawn");
            LeachHealth = elem.BoolElement("LeachHealth");
            LockedPortal = elem.BoolElement("LockedPortal");
            Oryx = elem.BoolElement("Oryx");
            Equipment = elem.FromCommaSepString32("Equipment");
            NexusPortal = elem.BoolElement("NexusPortal");
            Price = elem.IntElement("Price");
            GuildItem = elem.StringElement("GuildItem");
            GuildItemParam = elem.StringElement("GuildItemParam");
            NoTexture = elem.BoolElement("NoTexture");
            UnityOnly = elem.BoolElement("UnityOnly");
            AlwaysPositiveHealth = elem.BoolElement("AlwaysPositiveHealth");
            PetId = elem.StringElement("PetId");
            PetSkin = elem.StringElement("PetSkin");
            VaultItem = elem.BoolElement("VaultItem");
            Quantity = elem.IntElement("Quantity");

            // todo move the pet stuff into seperate class

            Pet = elem.BoolElement("Pet");
            Family = elem.StringElement("Family");
            DefaultSkin = elem.StringElement("DefaultSkin");
            FirstAbility = elem.StringElement("FirstAbility");
            BasicPet = elem.BoolElement("BasicPet");
            NoHatchOrFuse = elem.BoolElement("NoHatchOrFuse");
            PetProjectile = elem.BoolElement("PetProjectile");
            PetBehavior = elem.BoolElement("PetBehavior");
            if (elem.HasElement("BaseBehavior"))
                BaseBehaviorId = elem.Element("BaseBehavior").StringAttribute("id");
            Parameters = elem.Element("Parameters");
            PetAbility = elem.BoolElement("PetAbility");

            // todo move the player into seperate class

            Player = elem.BoolElement("Player");
            MaxMagicPoints = elem.IntElement("MaxMagicPoints");
            Attack = elem.IntElement("Attack");
            Speed = elem.IntElement("Speed");
            Dexterity = elem.IntElement("Dexterity");
            HpRegen = elem.IntElement("HpRegen");
            MpRegen = elem.IntElement("MpRegen");
            LevelIncreases = elem.Elements("LevelIncrease").ToDictionary(_ => _.Value, _ => KeyValuePair.Create(_.IntAttribute("min"), _.IntAttribute("max")));
            if (!Skin) // this will change when i move player into its own class
            {
                UnlockLevel = elem.Elements("UnlockLevel").ToDictionary(_ => _.Value, _ => KeyValuePair.Create(_.IntAttribute("level"), _.IntAttribute("type")));
            }
            else
            {
                SkinUnlockLevel = elem.IntElement("UnlockLevel");
            }
            UnlockCost = elem.IntElement("UnlockCost");
            SpawnPoint = elem.BoolElement("SpawnPoint");
            Skin = elem.BoolElement("Skin");
            PlayerClassType = elem.IntElement("PlayerClassType");
            PetYardType = elem.IntElement("PetYardType");
            Fame = elem.IntElement("Fame");
        }
    }
}
